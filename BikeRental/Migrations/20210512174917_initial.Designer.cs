// <auto-generated />
using System;
using BikeRentalApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BikeRentalApi.Migrations
{
    [DbContext(typeof(BikeRentalDbContext))]
    [Migration("20210512174917_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikeRentalApi.Models.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllTerrainSuspension")
                        .HasColumnType("bit");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("BikeStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ElectricMotor")
                        .HasColumnType("bit");

                    b.Property<int>("FrameSize")
                        .HasColumnType("int");

                    b.Property<int>("OwningStoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwningStoreId");

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = false,
                            BikeStyle = "Mountain",
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 517, DateTimeKind.Local).AddTicks(2801),
                            ElectricMotor = false,
                            FrameSize = 100,
                            OwningStoreId = 1,
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 2,
                            Available = false,
                            BikeStyle = "Road",
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 519, DateTimeKind.Local).AddTicks(5014),
                            ElectricMotor = false,
                            FrameSize = 230,
                            OwningStoreId = 1,
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            AllTerrainSuspension = true,
                            Available = true,
                            BikeStyle = "Road",
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 519, DateTimeKind.Local).AddTicks(5093),
                            ElectricMotor = false,
                            FrameSize = 45,
                            OwningStoreId = 2,
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            AllTerrainSuspension = true,
                            Available = true,
                            BikeStyle = "Dirt",
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 519, DateTimeKind.Local).AddTicks(5098),
                            ElectricMotor = true,
                            FrameSize = 200,
                            OwningStoreId = 1,
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            BikeStyle = "Trike",
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 519, DateTimeKind.Local).AddTicks(5101),
                            ElectricMotor = false,
                            FrameSize = 75,
                            OwningStoreId = 1,
                            Price = 15.00m
                        });
                });

            modelBuilder.Entity("BikeRentalApi.Models.BikeStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Surcharge")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BikeStores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 520, DateTimeKind.Local).AddTicks(8768),
                            DailyRate = 15.00m,
                            Discount = 0.10m,
                            Latitude = 34.749432m,
                            Longitude = -77.421997m,
                            Name = "Larry's Bike Shop",
                            PhoneNumber = "1-800-BIKE",
                            Surcharge = 2.99m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 521, DateTimeKind.Local).AddTicks(2863),
                            DailyRate = 15.00m,
                            Discount = 0.10m,
                            Latitude = 37.749432m,
                            Longitude = -71.421997m,
                            Name = "Timmy Got The Wheels",
                            PhoneNumber = "1-800-BIKE",
                            Surcharge = 5.99m
                        });
                });

            modelBuilder.Entity("BikeRentalApi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 521, DateTimeKind.Local).AddTicks(5090),
                            EmailAddress = "cbernall@gmail.com",
                            FirstName = "Craig",
                            LastName = "Bernall",
                            PhoneNumber = "123-4567"
                        });
                });

            modelBuilder.Entity("BikeRentalApi.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupervisorNavigationId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 521, DateTimeKind.Local).AddTicks(9394),
                            EmailAddress = "mkarepov@bikesRus.com",
                            FirstName = "Maksim",
                            JobTitle = "Cashier",
                            LastName = "Karepov",
                            PhoneNumber = "867-5309",
                            StoreId = 1,
                            SupervisorId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(824),
                            EmailAddress = "jdopke@bikesRus.com",
                            FirstName = "Jason",
                            JobTitle = "Manager",
                            LastName = "Dopke",
                            PhoneNumber = "555-5555",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("BikeRentalApi.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Archive")
                        .HasColumnType("bit");

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReserved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("CurrentStoreId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archive = true,
                            BikeId = 1,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(3978),
                            CurrentStoreId = 1,
                            CustomerId = 1,
                            DateDue = new DateTime(2021, 5, 10, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(5391),
                            DateReserved = new DateTime(2021, 4, 10, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(5021),
                            DateReturned = new DateTime(2021, 5, 12, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(5776),
                            GrandTotal = 1000.00m
                        },
                        new
                        {
                            Id = 2,
                            Archive = true,
                            BikeId = 2,
                            CreatedAt = new DateTime(2021, 5, 12, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(6963),
                            CurrentStoreId = 1,
                            CustomerId = 1,
                            DateDue = new DateTime(2021, 5, 26, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(6999),
                            DateReserved = new DateTime(2021, 4, 28, 13, 49, 14, 522, DateTimeKind.Local).AddTicks(6991),
                            GrandTotal = 250.00m
                        });
                });

            modelBuilder.Entity("BikeRentalApi.Models.Bike", b =>
                {
                    b.HasOne("BikeRentalApi.Models.BikeStore", "OwningStore")
                        .WithMany("Bikes")
                        .HasForeignKey("OwningStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningStore");
                });

            modelBuilder.Entity("BikeRentalApi.Models.Employee", b =>
                {
                    b.HasOne("BikeRentalApi.Models.BikeStore", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId");

                    b.HasOne("BikeRentalApi.Models.Employee", "SupervisorNavigation")
                        .WithMany("InverseSupervisorNavigation")
                        .HasForeignKey("SupervisorNavigationId");

                    b.Navigation("Store");

                    b.Navigation("SupervisorNavigation");
                });

            modelBuilder.Entity("BikeRentalApi.Models.Reservation", b =>
                {
                    b.HasOne("BikeRentalApi.Models.Bike", "Bike")
                        .WithMany("Reservations")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeRentalApi.Models.BikeStore", "CurrentStore")
                        .WithMany("Reservations")
                        .HasForeignKey("CurrentStoreId");

                    b.HasOne("BikeRentalApi.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("CurrentStore");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BikeRentalApi.Models.Bike", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BikeRentalApi.Models.BikeStore", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("Employees");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BikeRentalApi.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BikeRentalApi.Models.Employee", b =>
                {
                    b.Navigation("InverseSupervisorNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
